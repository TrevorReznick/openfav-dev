---
import ItemGrid from '~/components/dev/ItemGridDev.astro'
import { twMerge } from 'tailwind-merge'
import { Icon } from 'astro-icon/components'
import PersonalActivityFeed from '~/components/dashboard/sub/PersonalActivityFeed.astro'
import ActivityFeed from '~/components/dashboard/sub/ActivityFeed.astro'
import CardLists from '~/components/dashboard/sub/CardLists.astro'
import LastInsetions from '~/components/dashboard/sub/LastInsetions.astro'
import TestDynamic from '~/components/dashboard/sub/CardListNew.astro'
import * as fonts from '~/config/costants'

/* new generic card */
import GenericCard from './GenericCard.astro';
import type { CardProps } from './types';

const recentActivityData: CardProps = {
  cardName: 'Recent Activity',
  cardIcon: 'Activity',
  activities: [
    {
      action: 'Created List',
      actionIcon: 'Folder',
      timestamp: '2 hours ago',
      name: 'enzonax@example.com'
    },
    {
      action: 'Added link',
      actionIcon: 'Link',
      timestamp: '3 hours ago',
      name: 'enzonax@example.com'
    }
  ]
};

const newGenericActivityData: CardProps = {
  cardName: 'New Generic Activity',
  cardIcon: 'Activity',
  activities: [
    {
      action: 'Created List',
      actionIcon: 'Folder',
      timestamp: '1 hour ago',
      name: 'newuser@example.com'
    },
    {
      action: 'Added link',
      actionIcon: 'Link',
      timestamp: '2 hours ago',
      name: 'newuser@example.com'
    }
  ]
};



const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;

const updatedItems = [
  { type: 'ActivityFeed' },
  { type: 'CardLists' },
  { type: 'LastInsetions' },
  { type: 'PersonalActivityFeed' },
  ...items,
  { type: 'TestDynamic' },
  { type: 'NewGenericActivityCard' }
]
---

{
  updatedItems && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
          ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
          : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                  ? 'sm:grid-cols-2 '
                  : ''
        }`,
        containerClass
      )}
    >
      {updatedItems.map((item) => (
        <div>
         {item.type === 'ActivityFeed' ? (
            <ActivityFeed />
          ) : item.type === 'CardLists' ? (
            <CardLists item={item} />
          ) : item.type === 'LastInsetions' ? (
            <LastInsetions item={item} />
          ) : item.type === 'PersonalActivityFeed' ? (
            <PersonalActivityFeed item={item} />
          ) : item.type === 'TestDynamic' ? (
            <TestDynamic item={item} />
          ) : (
            <div class={twMerge('flex flex-row max-w-md', panelClass, item.classes?.panel)}>
              <div class="flex justify-center">
                {(item.icon || defaultIcon) && (
                  <Icon
                    name={item.icon || defaultIcon}
                    class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, item.classes?.icon)}
                  />
                )}
              </div>
              <div class="mt-0.5">
                {item.title && <h3 class={twMerge('text-xl font-bold', titleClass, item.classes?.title)}>{item.title}</h3>}
                {item.description && (
                  <p
                    class={twMerge(`${item.title ? 'mt-3' : ''} text-muted`, descriptionClass, item.classes?.description)}
                    set:html={item.description}
                  />
                )}
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  )
}

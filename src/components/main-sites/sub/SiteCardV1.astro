---
import { Globe, Clock } from 'lucide-react';
import { CARD } from '~/config/cardCostantsNew'

interface SiteData {
  id: string
  description: string
  icon: string
  image: string
  logo: string
  name: string
  title: string
  url: string
  area: string
  categoria: string
  tags: { id: string; name: string }[]
  ratings: any[]
  AI_think: any
  AI_summary: string
  id_provider: string
}

interface Props {
  sites: SiteData[]
}

const placeholder = '/placeholder.svg'

const { sites = [] } = Astro.props
---

<div id="card-grid" class={CARD.GRID}>
  {sites.map((site, index) => (
    <div 
      class={`${CARD.CONTAINER} ${CARD.COLORS.VARIANTS[index % CARD.COLORS.VARIANTS.length]}`}
      draggable="true"
      data-id={site.id}
    >
      <div class={CARD.IMAGE.WRAPPER}>
        <img 
          src={site.image || placeholder} 
          alt={site.title}
          class={CARD.IMAGE.IMG}
          loading="lazy"
        />
      </div>
      <div class={CARD.CONTENT.WRAPPER}>
        <div class={CARD.CONTENT.HEADER}>
          <h3 class={CARD.TYPOGRAPHY.TITLE}>{site.title}</h3>
          <a 
            href={site.url} 
            target="_blank" 
            rel="noopener noreferrer" 
            class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            <Globe className="w-4 h-4" />
          </a>
        </div>
        
        <div class={CARD.CONTENT.BODY}>
          <p class={CARD.TYPOGRAPHY.DESCRIPTION}>{site.description}</p>
          <div class={CARD.TAGS.CONTAINER}>
            {site.tags.map((tag) => (
              <span class={CARD.TAGS.TAG}>#{tag.name}</span>
            ))}
          </div>
        </div>

        <div class={CARD.CONTENT.FOOTER}>
          <div class={CARD.META.CONTAINER}>
            <div class={CARD.META.INFO}>
              <span class={CARD.TYPOGRAPHY.URL}>{site.name}</span>
            </div>
            <div class="flex items-center">
              <Clock className="w-3 h-3 mr-1" />
              <time class={CARD.META.DATE}>
                {new Date().toLocaleDateString()}
              </time>
            </div>
          </div>
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  function initDragAndDrop() {
    const cardGrid = document.getElementById('card-grid');
    if (!cardGrid) {
      console.error('Card grid element not found');
      return;
    }

    let draggedCard: HTMLElement | null = null;

    cardGrid.addEventListener('dragstart', (e: DragEvent) => {
      if (!(e.target instanceof HTMLElement)) return;
      draggedCard = e.target.closest('[draggable="true"]');
      if (!draggedCard) return;
      e.dataTransfer?.setData('text/plain', draggedCard.dataset.id || '');
      setTimeout(() => {
        if (draggedCard) draggedCard.style.opacity = '0.5';
      }, 0);
    });

    cardGrid.addEventListener('dragend', () => {
      if (draggedCard) {
        draggedCard.style.opacity = '1';
        draggedCard = null;
      }
    });

    cardGrid.addEventListener('dragover', (e: DragEvent) => {
      e.preventDefault();
      if (!(e.target instanceof HTMLElement)) return;
      const card = e.target.closest('[draggable="true"]');
      if (card instanceof HTMLElement && draggedCard && card !== draggedCard) {
        const rect = card.getBoundingClientRect();
        const next = (e.clientY - rect.top) / (rect.bottom - rect.top) > 0.5;
        cardGrid.insertBefore(draggedCard, next ? card.nextSibling : card);
      }
    });

    cardGrid.addEventListener('drop', (e: DragEvent) => {
      e.preventDefault();
    });
  }

  // Initialize drag and drop when the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', initDragAndDrop);
</script>


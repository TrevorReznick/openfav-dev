// middleware.ts
import { defineMiddleware } from 'astro:middleware'
import { supabase } from '~/providers/supabase'
import { currentPath, previousPath } from '../store/pathStore'

export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {
    // Aggiorna il percorso precedente con il valore corrente
    previousPath.set(currentPath.get()) // Mantieni la pagina da cui provieni
    currentPath.set(url.pathname)       // Imposta la pagina in cui stai andando

    if (protectedRoutes.includes(url.pathname)) {
      const accessToken = cookies.get('sb-access-token')
      const refreshToken = cookies.get('sb-refresh-token')

      if (!accessToken || !refreshToken) {
        return redirect('/login')
      }

      const { data, error } = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
      })

      if (error) {
        cookies.delete('sb-access-token', { path: '/' })
        cookies.delete('sb-refresh-token', { path: '/' })
        return redirect('/login')
      }
    }

    if (redirectRoutes.includes(url.pathname) || redirectRoutes.includes(url.pathname.replace(/\/$/, ''))) {
      const accessToken = cookies.get('sb-access-token')
      const refreshToken = cookies.get('sb-refresh-token')

      if (accessToken && refreshToken) {
        return redirect('/protected/page')
      }
    }

    return next()
  },
)
